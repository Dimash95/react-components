import Head from "next/head";
import { useRouter } from "next/router";
import Card from "../components/card/card";
import Modal from "../components/modal/modal";
import { AnimeResponse } from "../entities/anime-response";
import Search from "../components/search/search";
import PaginationAndPerPage from "@/components/pagination-and-per-page/pagination-and-per-page";
import styles from "@/styles/home.module.css";
import { fetchAllAnime } from "./api/fetch-all-anime";
import { fetchAnime } from "./api/fetch-anime";
import { HomePageQuery } from "@/entities/home-page-query";

interface Props {
  allAnime: AnimeResponse[];
  anime: AnimeResponse;
  searchedAnime: string;
  pageNumber: string;
  perPage: string;
}

export default function Home({
  allAnime,
  anime,
  searchedAnime,
  pageNumber = "1",
  perPage = "10",
}: Props) {
  const router = useRouter();
  const showAnimeById = (id: number) => {
    router.push({
      pathname: "/",
      query: { id: id }, // Обновляем параметры запроса в URL без перехода на новую страницу
    });
  };

  const showAnimeBySearchedAnime = (searchedAnime: string) => {
    router.push({
      query: { searchedAnime: searchedAnime }, // Обновляем параметры запроса в URL без перехода на новую страницу
    });
  };

  const setPaginationAndPageNumber = (pageNumber: string, perPage: string) => {
    router.push({
      query: { pageNumber: pageNumber, perPage: perPage }, // Обновляем параметры запроса в URL без перехода на новую страницу
    });
  };

  const closeModal = () => {
    router.push({
      pathname: "/",
    });
  };

  return (
    <>
      <Head>
        <title>Anime</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.wrapper}>
        <div className={styles.leftContent}>
          <Search
            searchedAnime={searchedAnime}
            showAnimeBySearchedAnime={showAnimeBySearchedAnime}
          />
          <PaginationAndPerPage
            pageNumber={pageNumber}
            perPage={perPage}
            setPaginationAndPageNumber={setPaginationAndPageNumber}
          />
          <Card allAnime={allAnime} showAnimeById={showAnimeById} />
        </div>
        {anime ? <Modal selectedAnime={anime} closeModal={closeModal} /> : null}
      </main>
    </>
  );
}

const cache = new Map();

export async function getServerSideProps({ query }: { query: HomePageQuery }) {
  const { id } = query;
  const { searchedAnime = cache.get("anime") || "" } = query;
  const { pageNumber } = query;
  const { perPage } = query;

  const allAnime = await fetchAllAnime(searchedAnime, pageNumber, perPage);
  if (id) {
    const anime = await fetchAnime(id);
    cache.set("anime", anime.title);
    return {
      props: { allAnime, anime },
    };
  }
  return {
    props: { allAnime },
  };
}
